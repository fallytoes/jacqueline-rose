{%- comment -%}

COLLECTION FILTERING

Accepts:
 - collection {Obj} Shopify's collection object
 - classes: {String} Wrapper classes
 - desktop_position: {String} Accepts 'sidebar' or 'topbar'
 - enable_collection_title: {Boolean} Enables collection title
 - enable_collection_description: {Boolean} Enables collection description
 - enable_filtering: {Boolean} Enables filtering
 - enable_sorting: {Boolean} Enables sorting
    
{%- endcomment -%}

<style>


  
/* Basic styling for view switching */

  
@media (min-width: 768px) {
  body[data-view-mode="grid"] .grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

body[data-view-mode="list"] .grid {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

body[data-view-mode="list"] .grid__item {
  width: 100%;
  display: flex;
  padding-bottom: 20px;
  border-bottom: 1px solid #e8e8e8;
}

body[data-view-mode="list"] .grid__item img {
  width: 30%;
}

/* Style active view option */
.view-option.active svg {
  color: #000;
}

.view-option svg {
  color: #999;
}
/* Grid View (Standard) */

@media (min-width: 768px) {
  body[data-view-mode="grid"] .grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (min-width: 992px) {
  body[data-view-mode="grid"] .grid {
    grid-template-columns: repeat(4, 1fr);
  }
}

/* Price Filter Styles */
.facets__price-wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
  padding: 1rem 1.2rem;
}

.facets__price {
  display: flex;
  flex-direction: column;
  width: 100%;
  margin-bottom: 1.5rem;
}

/* Price inputs styling */
.field--price {
  position: relative;
  display: flex;
  align-items: center;
  width: 100%;
  margin-bottom: 1rem;
}

.field--price .field__label {
  width: 50px;
}

.field--price .field__currency {
  position: absolute;
  left: 60px;
}

.field--price .field__input {
  padding-left: 25px;
  margin-left: 10px;
  flex-grow: 1;
}

/* Price Slider Styling */
.price-slider-container {
  width: 100%;
  padding: 10px 5px 20px;
  margin-bottom: 15px;
}

.price-slider-track {
  position: relative;
  width: 100%;
  height: 4px;
  background-color: #e0e0e0;
  border-radius: 2px;
}

.price-slider-range {
  position: absolute;
  height: 100%;
  background-color: #333;
  border-radius: 2px;
}

.price-slider-thumb {
  position: absolute;
  width: 16px;
  height: 16px;
  background-color: #fff;
  border: 2px solid #333;
  border-radius: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  cursor: pointer;
  z-index: 2;
}

.price-slider-thumb.left {
  left: 0;
}

.price-slider-thumb.right {
  right: 0;
  transform: translate(50%, -50%);
}

/* Apply button styling */
.facets__button {
  width: 100%;
  padding: 10px;
  background-color: #333;
  color: white;
  border: none;
  cursor: pointer;
  text-transform: uppercase;
  font-size: 14px;
  font-weight: 500;
}

.facets__button:hover {
  background-color: #555;
}


  /* New collection header styles */
  
 * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

.collection-wrapper {
  position: relative;
}

  .collection-header {
    position: relative;
    width: 100%;
    height: 120px;
    padding: 0 20px;
    padding-left: 20px !important;
    padding-right: 20px !important;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    min-height: 60px;
    border-bottom: 1px solid #e6e6e6;
    margin-bottom: 20px;
  }

  
.collection-title {
  font-size: 14px;
  font-weight: 400;
  text-transform: uppercase;
  letter-spacing: -0.5px;
  margin: 0;
}

.collection-controls {
  display: flex;
  align-items: center;
  gap: 20px;
}
  /* Dropdown Styling */
.dropdown-container {
  position: relative;
  display: inline-block;
}

  
  .collection-header .page-title {
  position: static; /* Change from absolute to static */
  font-size: 36px;
  font-weight: 400;
  text-transform: uppercase;
  letter-spacing: -0.5px;
  margin: 0; /* Add margin 0 to prevent spacing issues */
}

  .collection-filter-actions {
    justify-content: flex-end; /* Align to the right */
    position: static;
    right: 40px;
    display: flex;
    align-items: center;
    gap: 20px;
  }

  .filter-button,
.sort-button {
  background: none;
  border: none;
  cursor: pointer;
  text-transform: uppercase;
  font-size: 14px;
  font-weight: 400;
  letter-spacing: 0.5px;
  padding: 5px 0;
  position: relative;
}

.filter-button::after,
.sort-button::after {
  content: '▼';
  margin-left: 6px;
  font-size: 8px;
  display: inline-block;
  vertical-align: middle;
}

.dropdown-menu {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  min-width: 200px;
  background-color: #fff;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  z-index: 10;
  padding: 10px 0;
  margin-top: 5px;
}

.dropdown-container.open .dropdown-menu {
  display: block;
}

.sort-menu {
    width: 200px; /* Adjust width if needed */
    max-height: 400px;
    overflow-y: auto; /* Enable scrolling if too long */
}

.category-title {
    font-weight: bold;
    margin-top: 5px;
}

  .dropdown-item a {
    text-decoration: none;
    color: black;
    display: block;
    padding: 5px 5px;
}
  
.dropdown-item {
  padding: 8px 16px;
  cursor: pointer;
  font-size: 14px;
}

.dropdown-item:hover {
  background-color: #f9f9f9;
}

/* View Options */
.view-options {
  display: flex;
  align-items: center;
  gap: 10px;
}

.view-option {
  background: none;
  border: none;
  cursor: pointer;
  padding: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.view-option svg {
  color: #999;
}

.view-option.active svg {
  color: #000;
}
  
  .collection-filter-actions .filter-sort-btn {
    text-transform: uppercase;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 14px;
    display: flex;
    align-items: center;
  }

  .collection-filter-actions .filter-sort-btn::after {
    content: '▼';
    margin-left: 5px;
    font-size: 10px;
  }

  .collection-view-modes {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .collection-view-modes button {
    background: none;
    border: none;
    cursor: pointer;
  }

  .collection-view-modes svg {
    width: 16px;
    height: 16px;
    color: #999;
  }

  .collection-view-modes svg.active {
    color: #000;
  }

  /* Responsive Adjustments */
  @media screen and (max-width: 1024px) {
    .collection-header {
      padding: 0 30px;
    }
    .collection-header .page-title {
      left: 30px;
    }
    .collection-filter-actions {
      right: 30px;
    }
  }

  

  /* Responsive Styles */
@media screen and (max-width: 768px) {
  .collection-header {
    flex-direction: column;
    align-items: flex-start;
    padding: 15px 20px;
    gap: 15px;
  }
  
  .collection-title {
    font-size: 20px;
    margin-bottom: 10px;
  }
  
  .collection-controls {
    width: 100%;
    justify-content: space-between;
  }
  
  .dropdown-menu {
    left: 0;
    right: auto;
  }
  
  .sort-dropdown .dropdown-menu {
    left: auto;
    right: 0;
  }
}
  
  @media screen and (max-width: 768px) {
    .collection-header {
      flex-direction: column;
      align-items: flex-start;
      padding: 15px 20px;
      gap: 15px;
    }
    
    .collection-title {
      font-size: 20px;
      margin-bottom: 10px;
    }
    
    .collection-controls {
      width: 100%;
      justify-content: space-between;
    }
    
    .dropdown-menu {
      left: 0;
      right: auto;
    }
    
    .sort-dropdown .dropdown-menu {
      left: auto;
      right: 0;
    }
    
    .grid {
      grid-template-columns: 1fr !important;
      gap: 20px !important;
    }
    
    .grid__item {
      width: 100% !important;
    }
  }


  /* CSS for Grid/List View Switching */

/* Grid View (Default) */
body.grid-view-active .grid,
.grid-view .grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 30px;
}

@media (min-width: 768px) {
  body.grid-view-active .grid,
  .grid-view .grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (min-width: 992px) {
  body.grid-view-active .grid,
  .grid-view .grid {
    grid-template-columns: repeat(4, 1fr);
  }
}

/* List View */
body.list-view-active .grid,
.list-view .grid {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

/* Product item styling in list view */
body.list-view-active .grid__item,
.list-view .grid__item {
  width: 100%;
  display: flex;
  border-bottom: 1px solid #e8e8e8;
  padding-bottom: 20px;
}

body.list-view-active .grid__item .product-card__image-wrapper,
.list-view .grid__item .product-card__image-wrapper {
  width: 30%;
  flex-shrink: 0;
}

body.list-view-active .grid__item .product-card__info,
.list-view .grid__item .product-card__info {
  width: 70%;
  padding-left: 20px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

/* If your theme uses different classes, add them here */
body.list-view-active .product-item,
.list-view .product-item {
  display: flex;
  width: 100%;
  margin-bottom: 20px;
  border-bottom: 1px solid #e8e8e8;
  padding-bottom: 20px;
}

body.list-view-active .product-item .product-image,
.list-view .product-item .product-image {
  width: 30%;
  flex-shrink: 0;
}

body.list-view-active .product-item .product-details,
.list-view .product-item .product-details {
  width: 70%;
  padding-left: 20px;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

/* Adjust product card content for list view */
body.list-view-active .product-description,
.list-view .product-description {
  display: block !important;
  margin-top: 10px;
}

body.list-view-active .product-card__title,
.list-view .product-card__title {
  font-size: 18px;
  margin-bottom: 10px;
}

/* Add transitions for smooth switching */
.grid, .grid__item, .product-item {
  transition: all 0.3s ease;
}
{%- comment -%}

Template default code strt from here
  
{%- endcomment -%}

  
  .collection-wrapper {
    --filter-border-color: var(--border-color);
    --filter-text-color: var(--text-color);
    --filter-text-color-transparent10: var(--text-color-transparent10);
    --filter-font-family: var(--body-font-stack);
    --filter-font-style: var(--body-font-style);
    --filter-font-weight: var(--body-font-weight);
    --filter-body-font-size: var(--body-font-size);
    --filter-base-font-size: var(--base-font-size);
    --filter-body-font-size-12-em: var(--body-font-size-12-to-em);
    --filter-background-color: var(--color-primary-background);
    --filter-color-background-rgb: var(--color-primary-background-rgb);
  }

  /* Select */
  summary .icon-caret,
  .select .icon-caret,
  .customer select + svg {
    pointer-events: none;
    position: absolute;
    top: 50%;
    right: 0;
    transform: translateY(-50%);
  }

  .select__select,
  .customer select {
    cursor: pointer;
    padding: 0 36px 0 0.8rem;
  }

  .field {
    position: relative;
    width: 100%;
    display: flex;
  }

  .field--price {
    display: grid;
    grid-template-columns: auto 1fr;
  }

  .field--price .field__label {
    grid-column-start: 2;
  }

  .field__input::-webkit-search-cancel-button,
  .customer .field input::-webkit-search-cancel-button {
    display: none;
  }

  .field__input::placeholder,
  .customer .field input::placeholder {
    opacity: 0;
  }

  /* component-form */
  .field__input,
  .select__select,
  .customer .field input,
  .customer select {
    -webkit-appearance: none;
    appearance: none;
    background-color: transparent;
    border-radius: 0;
    color: var(--filter-text-color);
    width: 100%;
    border: 1px solid var(--filter-border-color);
    padding: .6rem 36px .6rem 0.8rem;
    box-sizing: border-box;
  }

  .field__input::-webkit-search-cancel-button,
  .customer .field input::-webkit-search-cancel-button {
    display: none;
  }

  .field__input::placeholder,
  .customer .field input::placeholder {
    opacity: 0;
  }

  .select__select {
    border: 1px solid var(--filter-border-color);
    font-family: var(--filter-font-family);
    font-style: var(--filter-font-style);
    font-weight: var(--filter-font-weight);
    font-size: var(--filter-body-font-size);
    color: var(--filter-text-color);
  }

  .text-area,
  .select {
    display: inline-block;
    position: relative;
    width: 100%;
  }

  /* base-details-summary */
  summary {
    cursor: pointer;
    list-style: none;
    position: relative;
  }

  summary::-webkit-details-marker {
    display: none;
  }

  .disclosure-has-popup {
    position: relative;
  }

  @media screen and (min-width: 768px) {
    .disclosure-has-popup[open] > summary::before {
      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 2;
      display: block;
      cursor: default;
      content: ' ';
      background: transparent;
    }
  }

  .disclosure-has-popup > summary::before {
    display: none;
  }

  .disclosure-has-popup[open] > summary + * {
    z-index: 101;
  }

  .collection {
    position: relative;
  }

  @media screen and (max-width: 767px) {
    .collection .title:not(.title--no-heading) {
      margin-top: -1rem;
    }
  }

  @media screen and (min-width: 768px) {
    .collection .title-wrapper-with-link--no-heading {
      margin-top: 6rem;
    }
  }

  .collection .grid__item,
  .template-search .grid__item {
    padding-bottom: 2rem;
  }

  .collection-product-count {
    margin-top: 0;
    font-size: var(--filter-base-font-size);
  }

  @media screen and (min-width: 768px) {
    .collection-product-count {
      margin-top: 1.5rem;
    }
  }

  .template-search .grid__item--small {
    padding-bottom: 0.5rem;
  }

  .collection.loading .collection-product-count {
    visibility: hidden;
  }

  @media screen and (max-width: 767px) {
    .collection .grid__item:only-child {
      flex: 0 0 100%;
      max-width: 100%;
    }
  }

  @media screen and (min-width: 768px) {
    .collection .grid__item,
    .template-search .grid__item {
      padding-bottom: 5rem;
    }

    .template-search .grid__item--small {
      padding-bottom: 1rem;
    }
  }

  .collection .negative-margin,
  .template-search .negative-margin {
    margin-bottom: -2rem;
  }

  @media screen and (min-width: 768px) {
    .collection .negative-margin,
    .template-search .negative-margin {
      margin-bottom: -5rem;
    }
  }

  @media screen and (min-width: 768px) {
    .collection .negative-margin--small {
      margin-bottom: -1rem;
    }
  }

  .collection .loading-overlay {
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: none;
    width: 100%;
    padding: 0 5rem;
    background-color: rgba(var(--filter-color-background-rgb), 0.7);
  }

  .collection.loading .loading-overlay {
    display: block;
  }

  .collection--empty .title-wrapper {
    margin-top: 10rem;
    margin-bottom: 15rem;
  }

  .collection-filters {
    display: flex;
    flex-direction: column;
  }

  @media screen and (max-width: 767px) {
    .collection-info__description {
      text-align: center;
    }
  }

  @media screen and (min-width: 768px) {
    .collection-filters {
      display: block;
    }

    .collection-info__sidebar {
      padding-top: 2rem;
    }

    .collection-info__sidebar .page--title {
      text-align: left;
    }

    .collection-info__topbar .collection-info__description.rte {
      text-align: center;
    } 
  }

  .collection-filters__label {
    display: block;
    color: var(--filter-text-color);
    font-size: var(--filter-base-font-size);
    line-height: 1;
    margin: 0 0 1rem;
    width: 100%;
  }
    
  .collection-filters__summary {
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: var(--filter-base-font-size);
    cursor: pointer;
    height: 4.5rem;
    padding: 0 1.5rem;
    min-width: 25rem;
    margin-top: 2.4rem;
    border: 0.1rem solid var(--filter-border-color);
  }

  .collection-filters__summary::after {
    position: static;
  }

  .collection-filters__field {
    flex-grow: 1;
    max-width: 100%;
  }

  .collection-filters__item button {
    padding: var(--filter-font-size 2.6rem);
    margin-left: 1rem;
  }

  .collection-filters__disclosure {
    min-width: 25rem;
  }

  .collection-filters__disclosure summary::after {
    top: 0;
  }

  .collection-filters__disclosure a {
    color: var(--filter-text-color);
    cursor: pointer;
    display: block;
    padding: 1.2rem;
    text-transform: capitalize;
    text-decoration: none;
  }

  @media screen and (min-width: 768px) {
    .collection-filters .collection-filters__sort {
      max-width: 100%;
    }
  }

  .facets {
    display: block;
  }

  .facets__form-inner {
    display: grid;
  }

  .facets__form-inner.desktop {
    grid-template-columns: 2fr 1fr;
    grid-template-rows: auto auto;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
  }

  .facets__form-inner.mobile {
    margin-top: 50px;
    grid-template-columns: 1fr;
    grid-template-rows: minmax(0, auto) 1fr minmax(0, auto);
  }

  .facets__wrapper {
    display: flex;
    flex-wrap: wrap;
    margin-left: -0.5rem;
  }

  .collection-filters__item {
    display: flex;
  }

  .facets__form-inner.mobile .collection-filters__item {
    grid-column: 1;
    grid-row: 1;
  }

  .facets__form-inner.mobile .facets__wrapper {
    grid-column: 1;
    grid-row: 2;
    display: block !important;
  }

  .facets__form-inner.mobile .active-facets-desktop {
    grid-column: 1;
    grid-row: 3;
  }

 /* Add or update these CSS rules */
@media screen and (max-width: 767px) {
  .facets__form-inner.desktop {
    display: none !important; /* Force hide on mobile */
  }
  
  .facets__form-inner.mobile {
    display: block !important; /* Force show on mobile */
  }
}

@media screen and (min-width: 768px) {
  .facets__form-inner.mobile {
    display: none !important; /* Force hide on desktop */
  }
  
  .facets__form-inner.desktop {
    display: block !important; /* Force show on desktop */
  }
}

  {%- if desktop_position == 'sidebar' -%}
    .facets__form-inner.desktop {
      grid-template-columns: 1fr;
      grid-template-rows: minmax(0, auto) 1fr minmax(0, auto);
    }

    .facets__wrapper {
      display: block !important;
    }
  {%- endif -%}

  @media screen and (max-width: 767px) {
    {%- if desktop_position == 'topbar' -%}
      .active-facets-desktop {
        order: -1;
      }
    {%- endif -%}
  }

  .facets__form-inner.desktop .facets__wrapper {
    {%- if section.settings.desktop_position == 'sidebar' -%}
      grid-column: 1;
      grid-row: 2;
    {% else %}
      grid-column: 1;
      grid-row: 1;
    {%- endif -%}
  }

  .facets__form-inner.desktop .collection-filters__item {
    margin-left: auto; 
    {%- if section.settings.desktop_position == 'sidebar' -%}
      grid-column: 1;
      grid-row: 1;
    {% else %}
      grid-column: 2;
      grid-row: 1;
    {%- endif -%}
  }

  .facets__form-inner.desktop .active-facets-desktop {
    {%- if section.settings.desktop_position == 'sidebar' -%}
      grid-column: 1;
      grid-row: 3;
    {%- else -%}
      grid-column: 1;
      grid-row: 2;
    {%- endif -%}
  }

  .facets__heading {
    display: block;
    color: var(--filter-text-color);
    font-size: var(--filter-base-font-size);
    line-height: 1;
    margin: 0 0 1rem 0.5rem;
    width: 100%;
  }

  .facets__reset {
    margin-left: auto;
    color: unset;
  }

  .facets__selected,
  .facets__reset {
    line-height: normal;
    height: fit-content;
  }

  .facets__disclosure {
    border: 1px solid var(--filter-border-color);
    margin: 0 0 calc(var(--grid-spacing-tight) * 0.75) calc(var(--grid-spacing-tight) * 0.75);
  }

  @media screen and (min-width: 768px) {
    .facets__disclosure {
      margin: 0 0 var(--grid-spacing-tight) var(--grid-spacing-tight);
    }
  }

  .facets__summary {
    padding: .6rem 36px .6rem 0.8rem;
    font-size: var(--filter-body-font-size);
    color: var(--filter-text-color);
  }

  .facets__summary > span {
    line-height: 1.3;
  }

  .facets__display {
    background-color: var(--filter-background-color);
    border-top: 1px solid var(--filter-border-color);
    overflow-y: auto;
  }

  @media screen and (min-width: 768px) {
    .facets__display {
      border: 1px solid var(--filter-border-color);
      max-height: 55rem;
      position: absolute;
      top: calc(100% + 0.5rem);
      left: -0.1rem;
      width: 35rem;
    }
  }

  .facets__header {
    border-bottom: 1px solid var(--filter-border-color);
    padding: 1rem 1.2rem;
    display: flex;
    justify-content: space-between;
    font-size: var(--filter-base-font-size);
    position: sticky;
    top: 0;
    background-color: var(--filter-background-color);
    z-index: 1;
  }

  .facets__list {
    padding: 1rem 1.2rem;
    margin: 0;
  }

  .facets__item {
    display: flex;
    align-items: center;
  }

  .facets__item label,
  .facets__item input[type='checkbox'] {
    cursor: pointer;
  }

  .facet-checkbox {
    padding: .5rem 0;
    flex-grow: 1;
    position: relative;
    font-size: var(--filter-base-font-size);
    display: flex;
    word-break: break-word;
    line-height: normal;
    align-items: center;
  }

  .facet-checkbox input[type='checkbox'] {
    position: absolute;
    opacity: 1;
    width: 16px;
    height: 16px;
    top: 9px;
    left: 0px;
    z-index: -1;
    appearance: none;
    -webkit-appearance: none;
    border-bottom: none;
    background: none;
  }

  .facet-checkbox input[type='checkbox']:focus {
    outline: none;
  }

  .facet-checkbox > svg,
  .facet-checkbox > div.filter-swatch {
    background-color: var(--filter-background-color);
    margin-right: 10px;
    flex-shrink: 0;
  }

  .facet-checkbox > div.filter-swatch {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .facet-checkbox > div.filter-swatch .filter-swatch--color {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    position: relative;
    outline: 1px solid var(--text-color-transparent25);
  }

  .facet-checkbox:hover:not(.facet-checkbox--disabled) input:not(:checked) + div.filter-swatch .filter-swatch--color {
    outline: 1px solid var(--text-color);
    outline-offset: 0;
  }

  .facet-checkbox--disabled div.filter-swatch .filter-swatch--color .color-option-sold-out {
    display: block;
    width: 100%;
    height: 1px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(-45deg);
  }

  .facet-checkbox--disabled div.filter-swatch .filter-swatch--color .color-option-sold-out.color-option-sold-out-background {
    z-index: 1;
    background-color: var(--filter-background-color);
  }

  .facet-checkbox--disabled div.filter-swatch .filter-swatch--color .color-option-sold-out.color-option-sold-out-foreground {
    z-index: 2;
    background-color: var(--text-color-transparent25);
  }

  .facet-checkbox .icon-checkmark {
    background-color: transparent;
    visibility: hidden;
    position: absolute;
    z-index: 5;
  }

  .facet-checkbox > input[type='checkbox']:checked + svg:not(.icon-checkmark) {
    background-color: var(--filter-text-color);
  }

  .facet-checkbox > input[type='checkbox']:checked ~ .icon-checkmark {
    color: var(--filter-background-color);
    visibility: visible;
  }

  .facet-checkbox--disabled {
    color: var(--filter-border-color);
  }

  .facets__price {
    display: flex;
    padding: 1rem 1.2rem;
  }

  .facets__price > * + * {
    margin-left: 2rem;
  }

  .facets__price .field {
    align-items: center;
  }

  .facets__price .field .field__currency {
    margin-right: 0.6rem;
  }

  button.facets__button {
    min-height: 0;
    margin: 0 0 0 0.5rem;
    box-shadow: none;
    padding-top: var(--filter-base-font-size);
    padding-bottom: var(--filter-base-font-size);
  }

  .active-facets {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
    margin-left: -1rem;
    grid-column: 1 / span 2;
    grid-row: 3;
  }

  @media all and (min-width: 768px) {
    .active-facets-mobile {
      display: none;
    }

    .active-facets {
      {%- if section.settings.desktop_position == 'sidebar' -%}
        grid-column: 1 / span 2;
        grid-row: 3;
      {% else %}
        grid-column: 1 / span 2;
        grid-row: 2;
      {%- endif -%}
    }
  }

  a.active-facets__button {
    color: var(--filter-text-color);
    background-color: var(--filter-text-color-transparent10);
    font-size: var(--filter-body-font-size-12-em);
    min-height: 0;
    min-width: 0;
    padding: 0.5rem 1rem;
    margin: 0 0 1rem 1rem;
    display: flex;
    align-items: center;
    word-break: break-all;
    position: relative;
  }

  a.active-facets__button.button--tertiary {
    padding-right: 12px;
  }

  a.active-facets__button div.color-icon {
    margin-left: 0;
    margin-right: 0.6rem;
  }

  .active-facets__button:only-child {
    display: none;
  }

  .active-facets__button.disabled {
    pointer-events: none;
  }

  .active-facets__button[loading="true"] .active-facets__button--loading-icon {
    display: flex;
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
  }

  .active-facets__button[loading="true"] .active-facets__button--text {
    visibility: hidden;
  }

  .count-bubble {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 0.7rem;
    min-width: 1.1rem;
    min-height: 1.1rem;
    border-radius: 50%;
    background-color: var(--filter-text-color);
    color: var(--filter-background-color);
    margin-left: 0.5rem;
  }

  .count-bubble:empty {
    visibility: hidden;
  }

  .count-bubble--dot:empty {
    visibility: visible;
  }

  .count-bubble--dot::before {
    content: '';
    width: 0.2rem;
    height: 0.2rem;
    display: block;
    background-color: var(--filter-background-color);
    border-radius: 50%;
  }

  .facets__summary > div {
    display: flex;
    align-items: center;
  }

  .sorting .button {
    margin-top: 2.4rem;
    padding-top: 1.3rem;
  }

  .spaced-section--full-width {
    width: 100%;
  }

  .collection-wrapper {
    display: flex;
    flex-wrap: wrap;
  }

  .collection-filtering-section {
    width: 100%;
  }

  @media screen and (min-width: 768px) {
    collection-filtering-form .drawer__close {
      display: none;
    }

    .js-drawer-open-filter collection-filtering-form .drawer__close {
      display: block;
    }
  }

  .mobile-facets__open {
    width: 100%;
  }

  @media screen and (min-width: 768px) {
    .mobile-facets__open {
      display: none;
    }
  }
  .mobile-facets__open > * + * {
    margin-left: 1rem;
  }

  .mobile-facets__open svg {
    width: 2rem;
  }

  .mobile-facets__open line,
  .mobile-facets__open circle {
    stroke: var(--color-button-border);
  }

  details[open] .mobile-facets__open {
    visibility: hidden;
  }

  
  @media screen and (max-width: 767px) {
    collection-filtering-form {
      position: fixed;
      top: 0;
      bottom: 0;
      left: -90%;
      z-index: 99999;
      background-color: white;
      max-width: 90%;
      width: 100%;
      transition: transform .6s cubic-bezier(.165,.84,.44,1) .1s;
      padding: 15px;
      overflow-y: auto;
    }

    .js-drawer-open-filter collection-filtering-form {
      transform: translateX(100%);
    }

    collection-filtering-form + .filtering-drawer-overlay {
      position: fixed;
      z-index: 1499;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: #e6e6e6;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.6s cubic-bezier(0.39, 0.575, 0.565, 1), visibility 0.6s;
    }
    
    .js-drawer-open-filter collection-filtering-form + .filtering-drawer-overlay {
      opacity: 0.7;
      visibility: visible;
    }

    .facets__form {
      opacity: 0;
      transition: opacity .4s ease-in;
    }

    .js-drawer-open-filter collection-filtering-form .facets__form {
      opacity: 1;
    }

    collection-filtering-form .drawer__close button {
      top: 8px;
      right: 8px;
    }
  }

  @media screen and (min-width: 768px) {
    collection-filtering-form + .filtering-drawer-overlay {
      display: none;
    }
  }

  input[data-swatch="true"]:checked + div.filter-swatch .filter-swatch--color {
    outline: 1px solid var(--text-color);
    outline-offset: 3px;
  }

  a[data-swatch="true"] div.color-icon {
    width: var(--inline-icon-size);
    height: var(--inline-icon-size);
    border-radius: 50%;
    border: 1px solid var(--border-color);
  }


.container, 
.page-width,
.collection-wrapper,
.collection-header,
.collection-filters,
.collection,
main > div {
  max-width: 100% !important;
  padding-left: 0 !important;
  padding-right: 0 !important;
  margin-left: 0 !important;
  margin-right: 0 !important;
  width: 100% !important;
}

/* For the product grid */
.grid {
  margin-left: 0 !important;
  margin-right: 0 !important;
  padding: 0 20px !important;
}

/* Add this CSS to make the title visible on mobile */
@media screen and (max-width: 767px) {
  /* Ensure the collection title is visible on mobile */
  .collection-title,
  .collection-header .page--title,
  .page--title,
  .template-title {
    display: block !important;
    font-size: 24px !important;
    text-align: center !important;
    margin: 15px 0 !important;
    padding: 0 15px !important;
    font-weight: normal !important;
    text-transform: uppercase !important;
    visibility: visible !important;
    opacity: 1 !important;
  }
  
  /* Make sure the container for the title is visible */
  .template-title--wrapper,
  .collection-info,
  .collection-header,
  .title-wrapper {
    display: block !important;
    visibility: visible !important;
    margin-top: 15px !important;
  }
  
  /* Fix for any hidden title due to negative margin */
  .collection .title:not(.title--no-heading) {
    margin-top: 0 !important; 
  }
  
  /* Make sure the header has enough space for the title */
  .collection-header {
    min-height: 60px !important;
    padding-top: 10px !important;
  }
}
@media screen and (max-width: 767px) {
    .collection-header {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .collection-title {
      font-size: 24px;
      margin-bottom: 20px;
    }
    
    .product-card__info {
      text-align: center;
      margin-top: 10px;
    }
    
    .product-card__title {
      font-size: 14px;
      margin-bottom: 5px;
    }
    
    .product-card__price {
      font-size: 14px;
    }
    
    .view-options {
      display: block;
      text-align: center;
      margin-top: 10px;
    }
    
    .view-options a {
      color: #000;
      text-decoration: underline;
      font-size: 14px;
    }
  }

@media screen and (min-width: 768px) and (max-width: 1024px) {
  .collection-header {
    padding: 20px;
  }
  
  .collection-title {
    font-size: 24px;
  }
  
  .collection-controls {
    justify-content: flex-end;
  }
}

/* Responsive Styles */
  @media screen and (max-width: 768px) {
    .collection-header {
      flex-direction: column;
      align-items: flex-start;
      padding: 15px 20px;
      gap: 15px;
    }
    
    .collection-title {
      font-size: 20px;
      margin-bottom: 10px;
    }
    
    .collection-controls {
      width: 100%;
      justify-content: space-between;
    }
    
    .dropdown-menu {
      left: 0;
      right: auto;
    }
    
    .sort-dropdown .dropdown-menu {
      left: auto;
      right: 0;
    }
     .grid {
    grid-template-columns: 1fr !important;
    gap: 20px !important;
  }
  
  .grid__item {
    width: 100% !important;
  }
  }

  @media screen and (min-width: 768px) and (max-width: 1024px) {
    .collection-header {
      padding: 20px;
    }
    
    .collection-title {
      font-size: 24px;
    }
    
    .collection-controls {
      justify-content: flex-end;
    }
  }
  /* General mobile responsiveness adjustments */
@media screen and (max-width: 767px) {
  .collection-header {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .collection-title {
    font-size: 24px;
    margin-bottom: 20px;
  }
  
  .product-card__info {
    text-align: center;
    margin-top: 10px;
  }
  
  .product-card__title {
    font-size: 14px;
    margin-bottom: 5px;
  }
  
  .product-card__price {
    font-size: 14px;
  }
  
  .view-options {
    display: block;
    text-align: center;
    margin-top: 10px;
  }
  
  .view-options a {
    color: #000;
    text-decoration: underline;
    font-size: 14px;
  }
}


  .mobile-collection-header {
    width: 100%;
    display: none; /* Hidden by default, shown only on mobile */
    flex-direction: column;
    padding: 0;
    margin-bottom: 0;
  }
  
  .mobile-collection-title {
    text-align: center;
    font-size: 14px;
    font-weight: 400;
    text-transform: uppercase;
    margin: 15px 0 20px;
    padding: 0 15px;
  }
  
  .mobile-collection-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 20px;
    border-top: 1px solid #e6e6e6;
    border-bottom: 1px solid #e6e6e6;
    background-color: #fff;
  }
  
  .mobile-filter-button,
  .mobile-sort-button {
    background: none;
    border: none;
    font-size: 14px;
    font-weight: 400;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    display: flex;
    align-items: center;
    cursor: pointer;
    padding: 5px 0;
  }
  
  .mobile-filter-button::after,
  .mobile-sort-button::after {
    content: '▼';
    margin-left: 6px;
    font-size: 8px;
    display: inline-block;
    vertical-align: middle;
  }
  
  .mobile-view-options {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .mobile-view-option {
    background: none;
    border: none;
    padding: 5px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .mobile-view-option svg {
    color: #999;
    width: 18px;
    height: 18px;
  }
  
  .mobile-view-option.active svg {
    color: #000;
  }
  
  /* Show only on mobile */
  @media screen and (max-width: 767px) {
    .mobile-collection-header {
      display: flex !important;
    }
    
    /* Hide the regular collection header */
    .collection-header {
      display: none !important;
    }
    
    /* Hide default filter button */
    .mobile-facets__open {
      display: none !important;
    }
    
    /* Make sure the collection title is properly hidden */
    .collection-info, 
    .collection-info > * {
      display: none !important;
    }
    
    /* Hide desktop filtering form */
    .facets__form-inner.desktop,
    .facets__form-inner.mobile > *:first-child {
      display: none !important;
    }
    
    /* Original mobile filter drawer styles */
    collection-filtering-form {
      position: fixed;
      top: 0;
      bottom: 0;
      left: -100%;
      z-index: 999999;
      background-color: white;
      max-width: 90%;
      width: 100%;
      transition: transform .3s ease-in-out;
      padding: 15px;
      overflow-y: auto;
    }
    
    .js-drawer-open-filter collection-filtering-form {
      transform: translateX(100%);
    }
  }
  
  /* Mobile sort dropdown */
  .mobile-sort-dropdown {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    width: 90%;
    max-width: 320px;
    z-index: 999999;
    border-radius: 3px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.15);
    display: none; /* Hidden by default */
  }
  
  .mobile-sort-dropdown.open {
    display: block;
  }
  
  .mobile-sort-dropdown-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    border-bottom: 1px solid #e6e6e6;
  }
  
  .mobile-sort-dropdown-title {
    font-size: 16px;
    font-weight: 500;
    text-transform: uppercase;
  }
  
  .mobile-sort-dropdown-close {
    background: none;
    border: none;
    font-size: 18px;
    line-height: 1;
    cursor: pointer;
  }
  
  .mobile-sort-dropdown-items {
    padding: 10px 0;
  }
  
  .mobile-sort-dropdown-item {
    padding: 12px 15px;
    cursor: pointer;
    font-size: 14px;
    border-bottom: 1px solid #f5f5f5;
  }
  
  .mobile-sort-dropdown-item:last-child {
    border-bottom: none;
  }
  
  .mobile-sort-dropdown-item:hover {
    background-color: #f9f9f9;
  }
  
  /* Mobile overlay for when filter/sort is open */
  .mobile-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    z-index: 99999;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }
  
  .mobile-overlay.open {
    opacity: 1;
    visibility: visible;
  }
  
  /* Style for drawer close button */
  .mobile-drawer-close {
    position: absolute;
    top: 15px;
    right: 15px;
    background: none;
    border: none;
    font-size: 20px;
    line-height: 1;
    cursor: pointer;
    z-index: 1;
  }
  
  /* Override native header spacing */
  .collection-wrapper {
    margin-top: 0 !important;
  }
  
  /* Fix for potential overlap issues */
  .filtering-drawer-overlay {
    z-index: 99998;
  }
  
  /* Style adjustments for filter drawer */
  .js-drawer-open-filter collection-filtering-form .drawer__close {
    display: flex !important;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    padding-bottom: 15px;
    border-bottom: 1px solid #e6e6e6;
    margin-bottom: 20px;
  }
  
  .drawer__close-title {
    font-size: 16px;
    font-weight: 500;
    text-transform: uppercase;
  }
  
  /* Grid and List View Styling specific for mobile */
  @media screen and (max-width: 767px) {
    /* Grid view (2 columns for mobile) */
    body[data-view-mode="grid"] .grid {
      display: grid !important;
      grid-template-columns: repeat(2, 1fr) !important;
      gap: 20px !important;
    }
    
    /* List view for mobile */
    body[data-view-mode="list"] .grid {
      display: flex !important;
      flex-direction: column !important;
      gap: 20px !important;
    }
    
    body[data-view-mode="list"] .grid__item {
      width: 100% !important;
      display: flex !important;
      padding-bottom: 20px !important;
      border-bottom: 1px solid #e8e8e8 !important;
    }
    
    body[data-view-mode="list"] .grid__item .card__media {
      width: 40% !important;
      margin-right: 15px !important;
    }
    
    body[data-view-mode="list"] .grid__item .card__content {
      width: 60% !important;
      display: flex !important;
      flex-direction: column !important;
      justify-content: center !important;
      text-align: left !important;
    }
  }


   .mobile-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: white;
    z-index: 9999;
    display: none;
    flex-direction: column;
    overflow-y: auto;
  }
  
  .mobile-modal.open {
    display: flex;
  }
  
  .mobile-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #e6e6e6;
    position: sticky;
    top: 0;
    background: white;
    z-index: 2;
  }
  
  .mobile-modal-title {
    font-size: 18px;
    font-weight: 400;
    text-transform: uppercase;
    margin: 0;
  }
  
  .mobile-modal-close {
    background: none;
    border: none;
    font-size: 24px;
    line-height: 1;
    padding: 0;
    cursor: pointer;
  }
  
  .mobile-modal-content {
    flex: 1;
    padding: 15px 20px;
    overflow-y: auto;
  }
  
  /* Sort Options */
  .mobile-sort-options {
    display: flex;
    flex-direction: column;
  }
  
  .mobile-sort-option {
    padding: 15px 0;
    border-bottom: 1px solid #f0f0f0;
    font-size: 15px;
    cursor: pointer;
  }
  
  .mobile-sort-option:last-child {
    border-bottom: none;
  }
  
  /* Filter Button Bar on Bottom */
  .mobile-filter-buttons {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    padding: 15px 20px;
    background-color: #1b1b1b;
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    z-index: 90;
  }
  
  .mobile-filter-buttons button {
    padding: 0;
    background: none;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.1);
  }
  
  .mobile-filter-buttons button svg {
    width: 20px;
    height: 20px;
    fill: white;
  }
  
  /* Collection grid identifier */
  .collection-grid-identifier {
    background-color: #4285f4;
    color: white;
    padding: 5px 10px;
    font-size: 12px;
    display: flex;
    align-items: center;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 90;
  }
  
  .collection-grid-identifier svg {
    width: 16px;
    height: 16px;
    margin-right: 5px;
  }
  
  /* Filter Categories */
  .mobile-filter-category {
    margin-bottom: 25px;
  }
  
  .mobile-filter-category-title {
    font-size: 16px;
    font-weight: 500;
    margin-bottom: 15px;
    text-transform: uppercase;
  }
  
  .mobile-filter-category-options {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .mobile-filter-category-option {
    display: flex;
    align-items: center;
  }
  
  .mobile-filter-category-option input[type="checkbox"] {
    margin-right: 10px;
  }
  
  /* Mobile search button */
  .mobile-search-button {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    z-index: 89;
    border: none;
    cursor: pointer;
  }
  
  .mobile-search-button svg {
    width: 24px;
    height: 24px;
    fill: #333;
  }
  
  /* Hide wishlist counter when modal is open */
  .mobile-modal.open ~ .wishlist-counter {
    display: none;
  }
  
  /* Media Queries */
  @media (min-width: 768px) {
    .mobile-modal,
    .mobile-filter-buttons,
    .collection-grid-identifier,
    .mobile-search-button {
      display: none !important;
    }
  }
  
  /* Mobile header styles */
  .collection-header-mobile {
    padding: 15px 15px 10px;
    text-align: center;
  }
  
  .collection-title-mobile {
    font-size: 28px;
    font-weight: 400;
    text-transform: uppercase;
    margin: 0 0 10px 0;
    line-height: 1.2;
  }
  
  /* Sort/Filter Button Styling */
  .sort-filter-row {
    display: flex;
    justify-content: center;
    border-bottom: 1px solid #e6e6e6;
    padding-bottom: 15px;
  }
  
  .mobile-sort-button,
  .mobile-filter-button {
    background: none;
    border: none;
    font-size: 14px;
    text-transform: uppercase;
    padding: 5px 15px;
    cursor: pointer;
    display: flex;
    align-items: center;
    position: relative;
  }
  
  .mobile-sort-button:after {
    content: '▼';
    margin-left: 6px;
    font-size: 8px;
  }
  
  @media (max-width: 767px) {
    /* Hide desktop elements */
    .collection-header,
    .mobile-facets__open,
    .facets__form-inner.desktop {
      display: none !important;
    }
    
    .collection-wrapper {
      margin-top: 0 !important;
    }
    
    /* Hide default titles */
    .collection-info, 
    .collection-info > * {
      display: none !important;
    }
    
    /* Show mobile header */
    .collection-header-mobile {
      display: block !important;
    }
  }

  /* Mobile Collection Header Styles */
  .mobile-collection-header {
    display: none; /* Hidden by default, shown only on mobile */
    text-align: center;
    padding: 15px 15px 10px;
  }
  
  .mobile-collection-title {
    font-size: 14px;
    font-weight: 400;
    text-transform: uppercase;
    margin: 0 0 20px 0;
    line-height: 1.2;
  }
  
  /* Fix for filter and sort buttons spacing */
  .mobile-controls {
    display: flex;
    justify-content: space-between; /* This spaces them apart on the ends */
    width: 100%;
    max-width: 320px;
    margin: 0 auto;
    gap: 20px;
  }
  
  .mobile-filter-button,
  .mobile-sort-button {
    background: none;
    border: none;
    font-size: 14px;
    font-weight: 400;
    text-transform: uppercase;
    padding: 5px 15px;
    cursor: pointer;
    display: inline-block; /* Changed from flex to inline-block */
  }
  
  .mobile-filter-button::after,
  .mobile-sort-button::after {
    content: '▼';
    margin-left: 6px;
    font-size: 8px;
  }
  
  /* Modal styles */
  .mobile-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: white;
    z-index: 9999;
    display: none;
    flex-direction: column;
  }
  
  .mobile-modal.open {
    display: flex;
  }
  
  .mobile-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #e6e6e6;
  }
  
  .mobile-modal-title {
    font-size: 18px;
    font-weight: 400;
    text-transform: uppercase;
    margin: 0;
  }
  
  .mobile-modal-close {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    padding: 0;
  }
  
  .mobile-modal-content {
    flex: 1;
    padding: 20px;
    overflow-y: auto;
  }
  
  /* Collection grid identifier */
  .collection-grid-identifier {
    background-color: #4285f4;
    color: white;
    padding: 5px 10px;
    font-size: 12px;
    display: flex;
    align-items: center;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 90;
  }
  
  .collection-grid-identifier svg {
    width: 16px;
    height: 16px;
    margin-right: 5px;
  }
  
  /* Mobile Sort Options */
  .mobile-sort-options {
    display: flex;
    flex-direction: column;
  }
  
  .mobile-sort-option {
    padding: 15px 0;
    border-bottom: 1px solid #f0f0f0;
    font-size: 15px;
    cursor: pointer;
  }
  
  .mobile-sort-option:last-child {
    border-bottom: none;
  }
  
  /* Filter Styles */
  .mobile-filter-category {
    margin-bottom: 25px;
  }
  
  .mobile-filter-category-title {
    font-size: 16px;
    font-weight: 500;
    margin-bottom: 15px;
  }
  
  .mobile-filter-category-options {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .mobile-filter-category-option {
    display: flex;
    align-items: center;
  }
  
  .mobile-filter-category-option input[type="checkbox"] {
    margin-right: 10px;
  }
  
  .mobile-filter-apply {
    width: 100%;
    padding: 12px;
    background: #333;
    color: white;
    border: none;
    margin-top: 20px;
    text-transform: uppercase;
    font-weight: 500;
    cursor: pointer;
  }
  
  /* Mobile overlay */
  .mobile-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    z-index: 9998;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }
  
  .mobile-overlay.open {
    opacity: 1;
    visibility: visible;
  }
  
  /* Mobile search button */
  .mobile-search-button {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    z-index: 89;
    border: none;
    cursor: pointer;
  }
  
  .mobile-search-button svg {
    width: 24px;
    height: 24px;
    fill: #333;
  }
  
  /* Media queries */
@media (max-width: 767px) {
  /* Hide ALL desktop collection headers and titles */
  .collection-header,
  .collection-title, 
  .page--title, 
  .template-title,
  .collection-info,
  .collection-info__description,
  .template-title--wrapper {
    display: none !important;
  }
  
  /* Hide specific elements that might be causing the duplication */
  h1.collection-title {
    display: none !important;
  }
  
  /* Ensure the desktop FILTER/SORT buttons are hidden */
  .collection-controls,
  .dropdown-container,
  .filter-button,
  .sort-button {
    display: none !important;
  }
  
  /* Ensure ONLY the mobile version is displayed */
  .mobile-collection-header {
    display: block !important;
  }
}
  
  @media (min-width: 768px) {
    /* Hide mobile elements on desktop */
    .collection-grid-identifier,
    .mobile-modal,
    .mobile-overlay,
    .mobile-search-button {
      display: none !important;
    }
  }

  /* Dropdown styling */
  .dropdown-container {
    position: relative;
    display: inline-block;
  }
  
  .filter-button,
  .sort-button {
    background: none;
    border: none;
    cursor: pointer;
    text-transform: uppercase;
    font-size: 14px;
    font-weight: 400;
    letter-spacing: 0.5px;
    padding: 5px 0;
    position: relative;
  }
  
  .filter-button::after,
  .sort-button::after {
    content: '▼';
    margin-left: 6px;
    font-size: 8px;
    display: inline-block;
    vertical-align: middle;
  }
  
  .dropdown-menu {
    display: none;
    position: absolute;
    top: 100%;
    min-width: 200px;
    background-color: #fff;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    z-index: 10;
    padding: 10px 0;
    margin-top: 5px;
  }
  
  .sort-dropdown .dropdown-menu {
    left: 0;
  }
  
  .filter-dropdown .dropdown-menu {
    right: 0;
  }
  
  .dropdown-container.open .dropdown-menu {
    display: block;
  }
  
  .dropdown-header {
    font-weight: bold;
    padding: 8px 16px;
    border-bottom: 1px solid #e6e6e6;
    margin-bottom: 5px;
  }
  
  .dropdown-item {
    padding: 8px 16px;
    cursor: pointer;
    font-size: 14px;
  }
  
  .dropdown-item:hover {
    background-color: #f9f9f9;
  }
  
  /* Mobile controls layout */
  .mobile-controls {
    display: flex;
    justify-content: space-between;
    width: 100%;
    max-width: 400px;
    margin: 0 auto;
  }


  @media screen and (max-width: 767px) {
    .mobile-collection-header {
      display: block !important;
      margin-top: 60px !important; /* Added to position below blue bar */
      padding: 15px 15px 10px;
      text-align: center;
    }
  
    .mobile-collection-title {
      font-size: 14px;
      font-weight: 400;
      text-transform: uppercase;
      margin: 0 0 20px 0;
      line-height: 1.2;
    }
    
    /* Important: Force display the mobile controls */
    .mobile-controls {
      display: flex !important;
      justify-content: space-between !important;
      width: 100% !important;
      max-width: 400px !important;
      margin: 0 auto !important;
    }
    
    /* Force display the filter and sort buttons */
    .dropdown-container {
      display: inline-block !important;
    }
    
    .filter-button,
    .sort-button {
      display: block !important;
      background: none;
      border: none;
      cursor: pointer;
      text-transform: uppercase;
      font-size: 14px;
      font-weight: 400;
      letter-spacing: 0.5px;
      padding: 5px 0;
      position: relative;
    }
    
    .filter-button::after,
    .sort-button::after {
      content: '▼';
      margin-left: 6px;
      font-size: 8px;
      display: inline-block;
      vertical-align: middle;
    }
    
    /* Hide desktop elements */
    .collection-header,
    .mobile-facets__open,
    .facets__form-inner.desktop {
      display: none !important;
    }
    
    /* Hide default collection elements */
    .collection-info, 
    .collection-info > *,
    .template-title--wrapper {
      display: none !important;
    }
  }
  
  /* Dropdown styling */
  .dropdown-container {
    position: relative;
    display: inline-block;
  }
  
  .dropdown-menu {
    display: none;
    position: absolute;
    top: 100%;
    min-width: 200px;
    background-color: #fff;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    z-index: 10;
    padding: 10px 0;
    margin-top: 5px;
  }
  
  .sort-dropdown .dropdown-menu {
    left: 0;
  }
  
  .filter-dropdown .dropdown-menu {
    right: 0;
  }
  
  .dropdown-container.open .dropdown-menu {
    display: block;
  }
  
  .dropdown-header {
    font-weight: bold;
    padding: 8px 16px;
    border-bottom: 1px solid #e6e6e6;
    margin-bottom: 5px;
  }
  
  .dropdown-item {
    padding: 8px 16px;
    cursor: pointer;
    font-size: 14px;
  }
  
  .dropdown-item:hover {
    background-color: #f9f9f9;
  }

  /* Ensure dropdown is positioned correctly on mobile */
@media screen and (max-width: 767px) {
  .filter-dropdown .dropdown-menu {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    max-width: 320px;
    max-height: 80vh;
    overflow-y: auto;
    background-color: white;
    z-index: 9999;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.2);
    padding: 15px 0;
  }
  
  .filter-dropdown.open .dropdown-menu {
    display: block !important;
  }
  
  /* Add a mobile overlay to dim background */
  .mobile-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    z-index: 9998;
    display: none;
  }
  
  .filter-dropdown.open + .mobile-overlay {
    display: block;
  }
}


  /* Mobile Modal Styles */
@media screen and (max-width: 767px) {
  .mobile-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: white;
    z-index: 9999;
    display: none;
    flex-direction: column;
    overflow-y: auto;
  }

  .mobile-modal.open {
    display: flex !important;
  }

  .mobile-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #e6e6e6;
    position: sticky;
    top: 0;
    background: white;
    z-index: 10;
  }

  .mobile-modal-title {
    font-size: 18px;
    font-weight: 400;
    text-transform: uppercase;
    margin: 0;
  }

  .mobile-modal-close {
    background: none;
    border: none;
    font-size: 24px;
    line-height: 1;
    padding: 0;
    cursor: pointer;
  }

  .mobile-modal-content {
    flex: 1;
    padding: 15px 20px;
    overflow-y: auto;
  }

  /* Dropdown Item Styling */
  .mobile-modal-content .dropdown-item {
    padding: 15px 0;
    border-bottom: 1px solid #f0f0f0;
    font-size: 15px;
    cursor: pointer;
    text-transform: uppercase;
  }

  .mobile-modal-content .dropdown-item:last-child {
    border-bottom: none;
  }

  .mobile-modal-content .dropdown-item.active {
    background-color: #f0f0f0;
  }

  .mobile-modal-content .dropdown-header {
    font-weight: bold;
    margin-bottom: 15px;
    text-transform: uppercase;
    font-size: 14px;
    color: #666;
  }

  /* Apply Filters Button */
  .mobile-filter-apply {
    width: 100%;
    padding: 15px;
    background-color: black;
    color: white;
    border: none;
    text-transform: uppercase;
    font-weight: 500;
    margin-top: 20px;
    cursor: pointer;
  }

  /* Mobile Overlay */
  .mobile-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    z-index: 9998;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .mobile-overlay.open {
    opacity: 1;
    visibility: visible;
  }
}

.mobile-collection-header {
  margin: 0 !important;
  padding: 15px 15px 10px !important;
}

.mobile-collection-title {
  margin: 0 !important;
}

.mobile-controls {
  margin: 0 !important;
}

.mobile-collection-header .mobile-collection-title {
  margin-bottom: 10px !important;
}

</style>

<script>

 

  

  document.addEventListener('DOMContentLoaded', function() {
  // Mobile filter and sort dropdown handling
  const filterButton = document.querySelector('.mobile-controls .filter-button');
  const filterDropdown = document.querySelector('.mobile-controls .filter-dropdown');
  const mobileOverlay = document.createElement('div');
  mobileOverlay.classList.add('mobile-overlay');
  document.body.appendChild(mobileOverlay);

  function closeAllDropdowns() {
    document.querySelectorAll('.dropdown-container').forEach(container => {
      container.classList.remove('open');
    });
    mobileOverlay.style.display = 'none';
    document.body.style.overflow = '';
  }

  // Filter button click handler
  if (filterButton && filterDropdown) {
    filterButton.addEventListener('click', function(e) {
      e.stopPropagation();
      
      // Close other dropdowns
      document.querySelectorAll('.dropdown-container').forEach(container => {
        if (container !== filterDropdown) {
          container.classList.remove('open');
        }
      });

      // Toggle current dropdown
      filterDropdown.classList.toggle('open');
      
      // Show/hide overlay
      if (filterDropdown.classList.contains('open')) {
        mobileOverlay.style.display = 'block';
        document.body.style.overflow = 'hidden';
      } else {
        mobileOverlay.style.display = 'none';
        document.body.style.overflow = '';
      }
    });
  }

  // Close dropdowns when clicking outside or on overlay
  mobileOverlay.addEventListener('click', closeAllDropdowns);
  document.addEventListener('click', function(e) {
    if (!e.target.closest('.dropdown-container')) {
      closeAllDropdowns();
    }
  });

  // Handle filter item clicks
  const filterItems = document.querySelectorAll('.filter-dropdown .dropdown-item');
  filterItems.forEach(item => {
    item.addEventListener('click', function() {
      const filterType = this.getAttribute('data-filter-type');
      const filterValue = this.getAttribute('data-filter-value');
      
      // Close dropdown
      closeAllDropdowns();
      
      // Handle different filter types
      if (filterType === 'collection') {
        // Navigate to collection
        window.location.href = `/collections/${filterValue}`;
      } else if (filterType === 'availability') {
        // Apply availability filter
        const currentUrl = window.location.href;
        const url = new URL(currentUrl);
        url.searchParams.set(filterValue, '1');
        window.location.href = url.toString();
      }
    });
  });
});
  
   document.addEventListener('DOMContentLoaded', function() {
    console.log('Collection script loaded');
    
    // Debug - check if elements exist
    const sortButton = document.getElementById('sort-button');
    const filterButton = document.getElementById('filter-button');
    console.log('Sort button exists:', !!sortButton);
    console.log('Filter button exists:', !!filterButton);
    
    // Dropdown functionality
    const dropdownButtons = document.querySelectorAll('.filter-button, .sort-button');
    console.log('Found dropdown buttons:', dropdownButtons.length);
    
    dropdownButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        console.log('Button clicked:', this.textContent.trim());
        e.stopPropagation();
        const parent = this.closest('.dropdown-container');
        
        // Close all other dropdowns
        document.querySelectorAll('.dropdown-container').forEach(container => {
          if (container !== parent) {
            container.classList.remove('open');
          }
        });
        
        // Toggle current dropdown
        parent.classList.toggle('open');
        console.log('Dropdown toggled');
      });
    });
    
    // Close dropdowns when clicking outside
    document.addEventListener('click', function(e) {
      if (!e.target.closest('.dropdown-container')) {
        document.querySelectorAll('.dropdown-container').forEach(container => {
          container.classList.remove('open');
        });
      }
    });
    
    // Sort dropdown functionality
    const sortItems = document.querySelectorAll('.sort-dropdown .dropdown-item');
    
    sortItems.forEach(item => {
      item.addEventListener('click', function() {
        const value = this.getAttribute('data-value');
        const currentUrl = window.location.href;
        
        console.log('Sort option clicked:', value);
        
        // Update URL with sort parameter
        const url = new URL(currentUrl);
        url.searchParams.set('sort_by', value);
        window.location.href = url.toString();
      });
    });
    
    // Filter dropdown functionality
    const filterItems = document.querySelectorAll('.filter-dropdown .dropdown-item');
    
    filterItems.forEach(item => {
      item.addEventListener('click', function() {
        const filterType = this.getAttribute('data-filter-type');
        const filterValue = this.getAttribute('data-filter-value');
        
        console.log('Filter option clicked:', filterType, filterValue);
        
        // Handle different filter types
        if (filterType === 'collection') {
          // Navigate to collection
          window.location.href = `/collections/${filterValue}`;
        } else if (filterType === 'availability') {
          // Apply availability filter
          const currentUrl = window.location.href;
          const url = new URL(currentUrl);
          url.searchParams.set(filterValue, '1');
          window.location.href = url.toString();
        }
      });
    });
  });
  
document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const mobileSortButton = document.getElementById('mobile-sort-button');
    const mobileFilterButton = document.getElementById('mobile-filter-button');
    const mobileSortModal = document.getElementById('mobile-sort-modal');
    const mobileFilterModal = document.getElementById('mobile-filter-modal');
    const mobileSortClose = document.getElementById('mobile-sort-close');
    const mobileFilterClose = document.getElementById('mobile-filter-close');
    const mobileOverlay = document.getElementById('mobile-overlay');
    
    // Prevent native filter drawer from opening
    const preventNativeDrawer = () => {
      const nativeButtons = document.querySelectorAll('[data-drawer-open-btn]');
      if (nativeButtons.length) {
        nativeButtons.forEach(btn => {
          btn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            return false;
          });
        });
      }
    };
    
    // Call this function to prevent native drawer
    preventNativeDrawer();
    
    // Function to open sort modal
    function openSortModal() {
      mobileSortModal.classList.add('open');
      mobileOverlay.classList.add('open');
      document.body.style.overflow = 'hidden';
    }
    
    // Function to open filter modal
    function openFilterModal() {
      mobileFilterModal.classList.add('open');
      mobileOverlay.classList.add('open');
      document.body.style.overflow = 'hidden';
    }
    
    // Function to close all modals
    function closeAllModals() {
      mobileSortModal.classList.remove('open');
      mobileFilterModal.classList.remove('open');
      mobileOverlay.classList.remove('open');
      document.body.style.overflow = '';
    }
    
    // Sort button click
    if (mobileSortButton) {
      mobileSortButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        openSortModal();
      });
    }
    
    // Filter button click
    if (mobileFilterButton) {
      mobileFilterButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        openFilterModal();
      });
    }
    
    // Close buttons
    if (mobileSortClose) {
      mobileSortClose.addEventListener('click', closeAllModals);
    }
    
    if (mobileFilterClose) {
      mobileFilterClose.addEventListener('click', closeAllModals);
    }
    
    // Overlay click
    if (mobileOverlay) {
      mobileOverlay.addEventListener('click', closeAllModals);
    }
    
    // Handle sort options
    const mobileSortOptions = document.querySelectorAll('.mobile-sort-option');
    if (mobileSortOptions) {
      mobileSortOptions.forEach(option => {
        option.addEventListener('click', function() {
          const value = this.getAttribute('data-value');
          const currentUrl = window.location.href;
          
          // Update URL with sort parameter
          const url = new URL(currentUrl);
          url.searchParams.set('sort_by', value);
          window.location.href = url.toString();
        });
      });
    }
    
    // Initialize view mode
    if (!document.body.hasAttribute('data-view-mode')) {
      document.body.setAttribute('data-view-mode', 'grid');
    }
  });
  
 // Add this to your theme's JavaScript file or as a script tag in your collection template
document.addEventListener('DOMContentLoaded', function() {
  initPriceSliders();
});

function initPriceSliders() {
  const priceSliderContainers = document.querySelectorAll('.price-slider-container');
  
  priceSliderContainers.forEach(container => {
    const parent = container.closest('.facets__price-wrapper');
    const minInput = parent.querySelector('.price-min-input');
    const maxInput = parent.querySelector('.price-max-input');
    const track = container.querySelector('.price-slider-track');
    const range = container.querySelector('.price-slider-range');
    const thumbLeft = container.querySelector('.price-slider-thumb.left');
    const thumbRight = container.querySelector('.price-slider-thumb.right');
    
    if (!minInput || !maxInput || !track || !range || !thumbLeft || !thumbRight) return;
    
    const min = parseInt(minInput.min) || 0;
    const max = parseInt(maxInput.max) || 1000;
    
    // Initialize slider positions
    let minValue = parseInt(minInput.value) || min;
    let maxValue = parseInt(maxInput.value) || max;
    
    updateSlider(minValue, maxValue);
    
    // Function to update the slider UI
    function updateSlider(minVal, maxVal) {
      const trackWidth = track.offsetWidth;
      const leftPercent = ((minVal - min) / (max - min)) * 100;
      const rightPercent = ((maxVal - min) / (max - min)) * 100;
      
      thumbLeft.style.left = `${leftPercent}%`;
      thumbRight.style.left = `${rightPercent}%`;
      range.style.left = `${leftPercent}%`;
      range.style.width = `${rightPercent - leftPercent}%`;
      
      minInput.value = minVal;
      maxInput.value = maxVal;
    }
    
    // Handle thumb drag events
    let isDragging = null;
    
    function startDrag(e, thumb) {
      e.preventDefault();
      isDragging = thumb;
      document.addEventListener('mousemove', onDrag);
      document.addEventListener('mouseup', stopDrag);
      document.addEventListener('touchmove', onDrag);
      document.addEventListener('touchend', stopDrag);
    }
    
    function onDrag(e) {
      if (!isDragging) return;
      
      const trackRect = track.getBoundingClientRect();
      const trackWidth = trackRect.width;
      
      // Get pointer position
      let pointerX;
      if (e.type === 'touchmove') {
        pointerX = e.touches[0].clientX;
      } else {
        pointerX = e.clientX;
      }
      
      // Calculate position as percentage
      let percent = Math.max(0, Math.min(100, ((pointerX - trackRect.left) / trackWidth) * 100));
      const value = Math.round(((max - min) * percent / 100) + min);
      
      if (isDragging === thumbLeft) {
        minValue = Math.min(value, maxValue - 1);
      } else {
        maxValue = Math.max(value, minValue + 1);
      }
      
      updateSlider(minValue, maxValue);
    }
    
    function stopDrag() {
      isDragging = null;
      document.removeEventListener('mousemove', onDrag);
      document.removeEventListener('mouseup', stopDrag);
      document.removeEventListener('touchmove', onDrag);
      document.removeEventListener('touchend', stopDrag);
    }
    
    // Add event listeners
    thumbLeft.addEventListener('mousedown', (e) => startDrag(e, thumbLeft));
    thumbRight.addEventListener('mousedown', (e) => startDrag(e, thumbRight));
    thumbLeft.addEventListener('touchstart', (e) => startDrag(e, thumbLeft));
    thumbRight.addEventListener('touchstart', (e) => startDrag(e, thumbRight));
    
    // Sync inputs with slider
    minInput.addEventListener('change', function() {
      const value = parseInt(this.value) || min;
      minValue = Math.min(Math.max(min, value), maxValue - 1);
      updateSlider(minValue, maxValue);
    });
    
    maxInput.addEventListener('change', function() {
      const value = parseInt(this.value) || max;
      maxValue = Math.max(Math.min(max, value), minValue + 1);
      updateSlider(minValue, maxValue);
    });
  });
}

  // Handle filter dropdown clicks
document.querySelectorAll('.filter-dropdown .dropdown-item').forEach(item => {
  item.addEventListener('click', function() {
    const filterType = this.getAttribute('data-filter-type');
    const filterLabel = this.getAttribute('data-filter-label');
    
    // Close the dropdown
    document.querySelector('.filter-dropdown').classList.remove('open');
    
    // Open the filter drawer
    document.body.classList.add('js-drawer-open-filter');
    
    // If it's a specific type of filter, we can auto-expand it
    if (filterType === 'price_range') {
      // Find and open the price range filter
      setTimeout(() => {
        const priceFilters = document.querySelectorAll('.facets__disclosure');
        priceFilters.forEach(filter => {
          if (filter.querySelector('.facets__summary span').textContent.trim() === filterLabel) {
            if (!filter.hasAttribute('open')) {
              filter.setAttribute('open', '');
            }
          }
        });
      }, 300); // Small delay to ensure drawer is open
    }
  });
});
  
 // JavaScript for handling dropdowns and view options
document.addEventListener('DOMContentLoaded', function() {
  // Dropdown functionality
  const dropdownButtons = document.querySelectorAll('.filter-button, .sort-button');
  
  dropdownButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.stopPropagation();
      const parent = this.closest('.dropdown-container');
      
      // Close all other dropdowns
      document.querySelectorAll('.dropdown-container').forEach(container => {
        if (container !== parent) {
          container.classList.remove('open');
        }
      });
      
      // Toggle current dropdown
      parent.classList.toggle('open');
    });
  });
  
  // Close dropdowns when clicking outside
  document.addEventListener('click', function(e) {
    if (!e.target.closest('.dropdown-container')) {
      document.querySelectorAll('.dropdown-container').forEach(container => {
        container.classList.remove('open');
      });
    }
  });
  
  // Sort dropdown functionality
  const sortItems = document.querySelectorAll('.sort-dropdown .dropdown-item');
  
  sortItems.forEach(item => {
    item.addEventListener('click', function() {
      const value = this.getAttribute('data-value');
      const currentUrl = window.location.href;
      
      // Update URL with sort parameter
      const url = new URL(currentUrl);
      url.searchParams.set('sort_by', value);
      window.location.href = url.toString();
    });
  });
  
  // View options functionality
  const viewOptions = document.querySelectorAll('.view-option');
  
  // Identify product grid - try multiple possible selectors
  const productGridSelectors = [
    '.collection-product-grid',
    '.collection-products',
    '.grid__item',
    '.products-grid',
    '.grid.grid--uniform',
    '.grid--view-items',
    '.collection .grid',
    '.negative-margin', // This appears to be in your template
    '.template-collection .grid',
    'ul.grid',
    'div.grid'
  ];
  
  let productGrid = null;
  
  // Try each selector until we find a match
  for (const selector of productGridSelectors) {
    const element = document.querySelector(selector);
    if (element) {
      productGrid = element;
      console.log('Found product grid with selector:', selector);
      break;
    }
  }
  
  // If we still don't have a product grid, let's try a more generic approach
  if (!productGrid) {
    // Look for the parent container of product items
    const productItems = document.querySelectorAll('.product, .product-card, .product-item, .collection-item');
    if (productItems.length > 0) {
      productGrid = productItems[0].parentElement;
      console.log('Found product grid as parent of product items');
    }
  }
  
  // If we found a product grid, set up view switching
  if (productGrid) {
    viewOptions.forEach(option => {
      option.addEventListener('click', function() {
        // Remove active class from all options
        viewOptions.forEach(opt => opt.classList.remove('active'));
        
        // Add active class to clicked option
        this.classList.add('active');
        
        // Get view type
        const viewType = this.getAttribute('data-view');
        console.log('Switching to view:', viewType);
        
        // Apply view class to product grid
        if (viewType === 'grid') {
          productGrid.classList.remove('list-view');
          productGrid.classList.add('grid-view');
          document.body.classList.remove('list-view-active');
          document.body.classList.add('grid-view-active');
        } else {
          productGrid.classList.remove('grid-view');
          productGrid.classList.add('list-view');
          document.body.classList.remove('grid-view-active');
          document.body.classList.add('list-view-active');
        }
        
        // Also add a body class for easier CSS targeting
        document.body.setAttribute('data-view-mode', viewType);
        
        // Optionally save the preference to localStorage
        localStorage.setItem('preferred-view', viewType);
      });
    });
  } else {
    console.warn('Could not find product grid element. View switching may not work.');
  }
  
  // Initialize view from localStorage if available
  const savedView = localStorage.getItem('preferred-view');
  if (savedView) {
    const viewToActivate = document.querySelector(`.view-option[data-view="${savedView}"]`);
    if (viewToActivate) {
      viewToActivate.click();
    }
  }
  
  // For filter functionality
  const filterItems = document.querySelectorAll('.filter-dropdown .dropdown-item');
  
  filterItems.forEach(item => {
    item.addEventListener('click', function() {
      // Your custom filter handling code here
      document.body.classList.add('js-drawer-open-filter');
    });
  });
});


  document.querySelectorAll('.dropdown-item a').forEach(item => {
    item.addEventListener('click', function() {
        document.querySelector('.sort-menu').classList.remove('show');
    });
});

// new script 

document.addEventListener('DOMContentLoaded', function() {
    // Dropdown functionality
    const dropdownButtons = document.querySelectorAll('.filter-button, .sort-button');
    
    dropdownButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.stopPropagation();
        const parent = this.closest('.dropdown-container');
        
        // Close all other dropdowns
        document.querySelectorAll('.dropdown-container').forEach(container => {
          if (container !== parent) {
            container.classList.remove('open');
          }
        });
        
        // Toggle current dropdown
        parent.classList.toggle('open');
      });
    });
    
    // Close dropdowns when clicking outside
    document.addEventListener('click', function(e) {
      if (!e.target.closest('.dropdown-container')) {
        document.querySelectorAll('.dropdown-container').forEach(container => {
          container.classList.remove('open');
        });
      }
    });
    
    // Sort dropdown functionality
    const sortItems = document.querySelectorAll('.sort-dropdown .dropdown-item');
    
    sortItems.forEach(item => {
      item.addEventListener('click', function() {
        const value = this.getAttribute('data-value');
        const currentUrl = window.location.href;
        
        // Update URL with sort parameter
        const url = new URL(currentUrl);
        url.searchParams.set('sort_by', value);
        window.location.href = url.toString();
      });
    });
    
    // Filter dropdown functionality
    const filterItems = document.querySelectorAll('.filter-dropdown .dropdown-item');
    
    filterItems.forEach(item => {
      item.addEventListener('click', function() {
        const filterType = this.getAttribute('data-filter-type');
        const filterValue = this.getAttribute('data-filter-value');
        
        // Handle different filter types
        if (filterType === 'collection') {
          // Navigate to collection
          window.location.href = `/collections/${filterValue}`;
        } else if (filterType === 'availability') {
          // Apply availability filter
          const currentUrl = window.location.href;
          const url = new URL(currentUrl);
          url.searchParams.set(filterValue, '1');
          window.location.href = url.toString();
        }
      });
    });
  });
  
 document.addEventListener('DOMContentLoaded', function() {
  // Mobile Filter and Sort Dropdown Functionality
  const mobileControls = document.querySelector('.mobile-controls');
  
  if (!mobileControls) {
    console.warn('Mobile controls not found');
    return;
  }

  // Create mobile modal for filters
  const createMobileModal = (type) => {
    // Remove existing modal if any
    const existingModal = document.getElementById(`mobile-${type}-modal`);
    if (existingModal) existingModal.remove();

    const modal = document.createElement('div');
    modal.id = `mobile-${type}-modal`;
    modal.classList.add('mobile-modal');
    
    // Modal Header
    const modalHeader = document.createElement('div');
    modalHeader.classList.add('mobile-modal-header');
    
    const modalTitle = document.createElement('h2');
    modalTitle.classList.add('mobile-modal-title');
    modalTitle.textContent = type.toUpperCase();
    
    const closeButton = document.createElement('button');
    closeButton.classList.add('mobile-modal-close');
    closeButton.innerHTML = '&times;';
    
    modalHeader.appendChild(modalTitle);
    modalHeader.appendChild(closeButton);

    // Modal Content
    const modalContent = document.createElement('div');
    modalContent.classList.add('mobile-modal-content');

    // Populate content based on type
    if (type === 'filter') {
      const filterCategories = document.querySelector('.filter-dropdown .dropdown-menu');
      if (filterCategories) {
        modalContent.innerHTML = filterCategories.innerHTML;
      }
    } else if (type === 'sort') {
      const sortCategories = document.querySelector('.sort-dropdown .dropdown-menu');
      if (sortCategories) {
        modalContent.innerHTML = sortCategories.innerHTML;
      }
    }

    // Create modal apply button for filters
    if (type === 'filter') {
      const applyButton = document.createElement('button');
      applyButton.classList.add('mobile-filter-apply');
      applyButton.textContent = 'Apply Filters';
      modalContent.appendChild(applyButton);
    }

    modal.appendChild(modalHeader);
    modal.appendChild(modalContent);
    document.body.appendChild(modal);

    // Add event listeners
    closeButton.addEventListener('click', () => {
      modal.classList.remove('open');
      document.querySelector('.mobile-overlay').classList.remove('open');
      document.body.style.overflow = '';
    });

    // Handle item clicks
    const modalItems = modalContent.querySelectorAll('.dropdown-item');
    modalItems.forEach(item => {
      item.addEventListener('click', function() {
        // Remove active state from all items
        modalItems.forEach(i => i.classList.remove('active'));
        
        // Add active state to clicked item
        this.classList.add('active');

        // Handle different types of filters/sorts
        const filterType = this.getAttribute('data-filter-type');
        const filterValue = this.getAttribute('data-filter-value');
        const sortValue = this.getAttribute('data-value');

        if (filterType === 'collection') {
          // Navigate to collection
          window.location.href = `/collections/${filterValue}`;
        } else if (filterType === 'availability') {
          // Apply availability filter
          const currentUrl = window.location.href;
          const url = new URL(currentUrl);
          url.searchParams.set(filterValue, '1');
          window.location.href = url.toString();
        } else if (sortValue) {
          // Apply sorting
          const currentUrl = window.location.href;
          const url = new URL(currentUrl);
          url.searchParams.set('sort_by', sortValue);
          window.location.href = url.toString();
        }
      });
    });

    return modal;
  };

  // Create mobile overlay if it doesn't exist
  let mobileOverlay = document.querySelector('.mobile-overlay');
  if (!mobileOverlay) {
    mobileOverlay = document.createElement('div');
    mobileOverlay.classList.add('mobile-overlay');
    document.body.appendChild(mobileOverlay);
  }

  // Filter button handler
  const filterButton = document.querySelector('.mobile-controls .filter-button');
  if (filterButton) {
    filterButton.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();

      // Create or get existing filter modal
      let filterModal = document.getElementById('mobile-filter-modal');
      if (!filterModal) {
        filterModal = createMobileModal('filter');
      }

      // Show modal and overlay
      filterModal.classList.add('open');
      mobileOverlay.classList.add('open');
      document.body.style.overflow = 'hidden';
    });
  }

  // Sort button handler
  const sortButton = document.querySelector('.mobile-controls .sort-button');
  if (sortButton) {
    sortButton.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();

      // Create or get existing sort modal
      let sortModal = document.getElementById('mobile-sort-modal');
      if (!sortModal) {
        sortModal = createMobileModal('sort');
      }

      // Show modal and overlay
      sortModal.classList.add('open');
      mobileOverlay.classList.add('open');
      document.body.style.overflow = 'hidden';
    });
  }

  // Overlay click handler to close modals
  mobileOverlay.addEventListener('click', function() {
    const openModals = document.querySelectorAll('.mobile-modal.open');
    openModals.forEach(modal => modal.classList.remove('open'));
    this.classList.remove('open');
    document.body.style.overflow = '';
  });
});

  // Sort dropdown functionality
document.addEventListener('DOMContentLoaded', function() {
    // Sort dropdown functionality
    const sortItems = document.querySelectorAll('.sort-dropdown .dropdown-item');
    
    sortItems.forEach(item => {
      item.addEventListener('click', function() {
        const value = this.getAttribute('data-value');
        const currentUrl = window.location.href;
        
        // Update URL with sort parameter
        const url = new URL(currentUrl);
        url.searchParams.set('sort_by', value);
        window.location.href = url.toString();
      });
    });
  });
</script>

{%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}

{% capture icon_caret %}
  {% render 'theme-icon' with icon: 'chevron_down', iconSize: 16, iconClasses: 'icon icon-caret' %}
{% endcapture %}

{% capture icon_close %}
  {% render 'theme-icon' with icon: 'close', iconSize: 12, iconClasses: 'icon icon-close-small' %}
{% endcapture %}

{%-liquid
  if enable_collection_title and collection.title != blank
    assign collection_title = true
  endif

  if enable_collection_description and collection.description != blank
    assign collection_description = true
  endif

  assign color_langs = 'color,colour,couleur,colore,farbe,색,色,färg,farve' | split: ',' | join: ' '
-%}

{%- capture filters -%}
  <div class="facets__wrapper">
    {%- unless collection.filters == empty -%}
      <p class="facets__heading label-font">{{ 'sections.collection_template.filter_by_label' | t }}</p>
    {%- endunless -%}

    {%- for filter in collection.filters -%}
      {% case filter.type %}
      
      {% when 'boolean' or 'list' %}
        {% liquid 
          assign isColor = false
          assign file_extension = 'png'
          assign downcased_label = filter.label | downcase
          if color_langs contains downcased_label
            assign isColor = true
          endif

          case filter.presentation
            when 'swatch' or 'image'
              assign is_filter_swatch = true
            else
              assign is_filter_swatch = false
          endcase
        %}

        <details class="disclosure-has-popup facets__disclosure js-filter" data-index="{{ forloop.index }}">
          <summary class="facets__summary">
            <div class="inline-icon--wrapper dropdown-icon">
              <span>{{ filter.label | escape }}</span>
              <span class="count-bubble">{%- if filter.active_values.size > 0 -%}{{ filter.active_values.size }}{%- endif -%}</span>
              {{ icon_caret }}
            </div>
          </summary>
          <div class="facets__display{% if is_filter_swatch %} is-filter-swatch{% endif %}">
            <div class="facets__header text-inline-link-animated">
              <span class="facets__selected no-js-hidden">{{ 'sections.collection_template.filters_selected' | t: count: filter.active_values.size }}</span>
              <a aria-label="{{ 'general.accessibility.clear_all_filters' | t }}" href="{{ filter.url_to_remove }}" class="facets__reset link underlined-link js-facet-remove">{{ 'sections.collection_template.reset' | t }}</a>
            </div>

            {% liquid 
              if filter.presentation == 'swatch'
                assign filter_swatch_class = 'swatch-type-color'
              elsif filter.presentation == 'image'
                assign filter_swatch_class = 'swatch-type-image'
              endif
            %}

            <ul 
              class="facets__list list-unstyled{% if section.settings.show_swatch_filter_labels %} swatch-labels--enabled{% endif %} {{ filter_swatch_class }}" 
              role="list"
            >
              {%- for value in filter.values -%}
                {% liquid 
                  assign image_url = value.label | handle | append: '.' | append: file_extension | asset_url
                  assign has_image_swatch = false

                  if image_url contains 'v='
                    assign has_image_swatch = true
                  endif

                  assign filter_swatch_is_image = false
                  assign swatch_has_image = false

                  if filter.presentation == 'image'
                    assign filter_swatch_is_image = true
                    assign filter_swatch_value = value.image
                    if value.image != blank
                      assign filter_swatch_type = 'image'
                    else
                      assign filter_switch_type = ''
                    endif
                  elsif filter.presentation == 'swatch'
                    if value.swatch.image != blank or value.swatch.color != blank
                      assign filter_swatch_type = 'color'
                    else
                      assign filter_swatch_type = ''
                    endif

                    if value.swatch.image != blank
                      assign swatch_has_image = true
                      assign filter_swatch_value = value.swatch.image
                    else
                      assign filter_swatch_value = value.swatch.color
                    endif
                  else
                    assign filter_swatch_type = ''
                    assign filter_swatch_value = ''
                  endif
                %}

                <li class="list-menu__item facets__item">
                  <label for="Filter-{{ filter.label | escape }}-{{ forloop.index }}" class="facet-checkbox inline-icon--wrapper wrap-focus{% if value.count == 0 and value.active == false %} facet-checkbox--disabled{% endif %}{% if filter_swatch_is_image %} filter-swatch-style--image{% endif %}">
                    <input type="checkbox"
                      name="{{ value.param_name }}"
                      value="{{ value.value }}"
                      id="Filter-{{ filter.label | escape }}-{{ forloop.index }}"
                      {% if value.active %}checked{% endif %}
                      {% if value.count == 0 and value.active == false %}disabled{% endif %}
                      {% if isColor %}data-swatch="true"{% endif %}
                    >

                    {% if is_filter_swatch %}
                      {% render 'filter-swatch',
                        type: filter_swatch_type,
                        value: filter_swatch_value,
                        show_swatch_label: section.settings.show_swatch_filter_labels,
                        swatch_label: value.label,
                        swatch_has_image: swatch_has_image
                      %}
                    {% else %}
                        {% unless isColor %}
                          <svg width="16" height="16" viewBox="0 0 16 16" aria-hidden="true" focusable="false">
                            <rect width="16" height="16" stroke="currentColor" fill="none" stroke-width="1"></rect>
                          </svg>

                          {% render 'theme-icon' with icon: 'checkmark', iconSize: 14, iconClasses: 'icon icon-checkmark', iconAttributes: 'aria-hidden="true" focusable="false"' %}
                        {% else %}
                          <div
                            aria-hidden="true" 
                            focusable="false"
                            class="filter-swatch"
                          >
                            <div 
                              class="filter-swatch--color" 
                              {% if isColor %}style="{% if has_image_swatch %}background-image: url({{ image_url }}); background-size: cover; background-position: center center; background-repeat: no-repeat;{% else %}background-color: {{ value.label }};{% endif %}"{% endif %}
                            >
                              <span class="color-option-sold-out color-option-sold-out-background"></span>
                              <span class="color-option-sold-out color-option-sold-out-foreground"></span>
                            </div>
                          </div>
                        {% endunless %}

                      {{ value.label | escape }} ({{ value.count }})
                    {% endif %}
                  </label>
                </li>
              {%- endfor -%}
            </ul>
          </div>
        </details>
        
      {% when 'price_range' %}
        {% liquid
          assign currencies_using_comma_decimals = 'ANG,ARS,BRL,BYN,BYR,CLF,CLP,COP,CRC,CZK,DKK,EUR,HRK,HUF,IDR,ISK,MZN,NOK,PLN,RON,RUB,SEK,TRY,UYU,VES,VND' | split: ','
          assign uses_comma_decimals = false
          if currencies_using_comma_decimals contains cart.currency.iso_code
            assign uses_comma_decimals = true
          endif
        %}
        <details class="disclosure-has-popup facets__disclosure js-filter" data-index="{{ forloop.index }}">
          <summary class="facets__summary">
            <div class="inline-icon--wrapper dropdown-icon">
              <span>{{ filter.label | escape }}</span>
              <span class="count-bubble{%- if filter.min_value.value or filter.max_value.value -%} count-bubble--dot{% endif %}"></span>
              {{ icon_caret }}
            </div>
          </summary>
          <div class="facets__display">
            <div class="facets__header text-inline-link-animated">
              {%- assign max_price_amount = filter.range_max | money | escape -%}
              <span class="facets__selected">{{ "Price Range" | t }}: {{ max_price_amount }}</span>
              <a aria-label="{{ 'general.accessibility.clear_all_filters' | t }}" href="{{ filter.url_to_remove }}" class="facets__reset link underlined-link js-facet-remove">{{ 'Reset' | t }}</a>
            </div>
          
            <div class="facets__price-wrapper">
              <div class="facets__price">
                <div class="field field--price">
                  <label class="field__label" for="price-min-{{ forloop.index }}">{{ 'From' | t }}</label>
                  <span class="field__currency">{{ cart.currency.symbol }}</span>
                  <input 
                    class="field__input price-min-input"
                    name="{{ filter.min_value.param_name }}"
                    id="price-min-{{ forloop.index }}"
                    {%- if filter.min_value.value -%}
                      {%- if uses_comma_decimals -%}
                        value="{{ filter.min_value.value | money_without_currency | replace: '.', '' | replace: ',', '.' }}"
                      {%- else -%}
                        value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}"
                      {% endif %}
                    {%- endif -%}
                    type="number"
                    placeholder="0"
                    min="0"
                    max="{{ filter.range_max | money_without_currency | replace: ',', '' }}">
                </div>
              
                <div class="field field--price">
                  <label class="field__label" for="price-max-{{ forloop.index }}">{{ 'To' | t }}</label>
                  <span class="field__currency">{{ cart.currency.symbol }}</span>
                  <input 
                    class="field__input price-max-input"
                    name="{{ filter.max_value.param_name }}"
                    id="price-max-{{ forloop.index }}"
                    {%- if filter.max_value.value -%}
                      {%- if uses_comma_decimals -%}
                        value="{{ filter.max_value.value | money_without_currency | replace: '.', '' | replace: ',', '.' }}"
                      {%- else -%}
                        value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}"
                      {% endif %}
                    {%- endif -%}
                    type="number"
                    placeholder="{{ filter.range_max | money_without_currency | replace: ',', '' }}"
                    min="0"
                    max="{{ filter.range_max | money_without_currency | replace: ',', '' }}">
                </div>
              </div>
            
              <!-- Price slider -->
              <div class="price-slider-container">
                <div class="price-slider-track">
                  <div class="price-slider-range"></div>
                  <div class="price-slider-thumb left"></div>
                  <div class="price-slider-thumb right"></div>
                </div>
              </div>
            
              <button type="submit" class="facets__button button">{{ 'Apply' | t }}</button>
            </div>
          </div>
        </details>
      {% endcase %}
    {%- endfor -%}
    
    <noscript>
      <button type="submit" class="facets__button button">{{ 'sections.collection_template.filter_button' | t }}</button>
    </noscript>
  </div>

  {% if collection.current_vendor or collection.current_type %}
    <input type="hidden" name="q" value="{{ collection.current_vendor }}{{ collection.current_type }}">
  {% endif %}
{%- endcapture -%}

{%- capture active_facets -%}
  <div class="active-facets active-facets-desktop">
    <a aria-label="{{ 'general.accessibility.clear_all_filters' | t }}" href="{{ collection.url }}?sort_by={{ sort_by }}" class="active-facets__button button button--secondary js-facet-remove" loading="false">
      <span class="active-facets__button--text">{{ 'sections.collection_template.clear_all' | t }}</span>
      <div class="active-facets__button--loading-icon hidden">
        {% render 'theme-icon' with icon: 'circle-notch', iconClasses: 'spin js fa-2x' %}<span class="sr-only">{{ 'collections.paginate.loading' | t }}</span>
      </div>
    </a>
    {%- for filter in collection.filters -%}

      {% liquid 
        assign isColor = false
        assign file_extension = 'png'
        assign downcased_label = filter.label | downcase
        if color_langs contains downcased_label
          assign isColor = true
        endif
      %}

      {%- for value in filter.active_values -%}
        <a aria-label="{{ 'general.accessibility.remove_filter' | t: filter: filter.label | append: ': ' | append: value.label }}" class="active-facets__button button button--tertiary js-facet-remove" href="{{ value.url_to_remove }}" {% if isColor %}data-swatch="true"{% endif %} loading="false">
          <span class="active-facets__button--text inline-icon--wrapper icon--right">
            {% if filter.type == 'boolean' %}
              {{ filter.label | escape | append: ': ' }}
            {% endif %}

            {% if isColor %}
              {% liquid 
                assign image_url = value.label | handle | append: '.' | append: file_extension | asset_url
                assign has_image_swatch = false

                if image_url contains 'v='
                  assign has_image_swatch = true
                endif
              %}

              <div 
                aria-hidden="true" 
                focusable="false"
                class="color-icon"
                {% if isColor %}style="{% if has_image_swatch %}background-image: url({{ image_url }}); background-size: cover;{% else %}background-color: {{ value.label }};{% endif %}"{% endif %}
              >
              </div>
            {% endif %}

            {{ value.label | escape }}
            {{ icon_close }}
          </span>
          <div class="active-facets__button--loading-icon hidden">
            {% render 'theme-icon' with icon: 'circle-notch', iconClasses: 'spin js fa-2x' %}<span class="sr-only">{{ 'collections.paginate.loading' | t }}</span>
          </div>
        </a>
      {%- endfor -%}
      {% if filter.type == "price_range" %}
          {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
            {% assign filter_min_value = filter.min_value.value | money %}
            {% assign filter_max_value = filter.max_value.value | money %}
            {% assign filter_aria_label = filter.label | append: ': ' | append: filter_min_value | append: ' - ' | append: filter_max_value %}
            <a aria-label="{{ 'general.accessibility.remove_filter' | t: filter: filter_aria_label }}" class="active-facets__button button button--tertiary js-facet-remove" href="{{ filter.url_to_remove }}" loading="false">
            <span class="active-facets__button--text inline-icon--wrapper icon--right">
              {%- if filter.min_value.value -%}{{ filter.min_value.value | money }}{%- else -%}{{ 0 | money }}{%- endif -%}-{%- if filter.max_value.value -%}{{ filter.max_value.value | money }}{%- else -%}{{ filter.range_max | money }}{%- endif -%}
              {{ icon_close }}
            </span>
            <div class="active-facets__button--loading-icon hidden">
              {% render 'theme-icon' with icon: 'circle-notch', iconClasses: 'spin js fa-2x' %}<span class="sr-only">{{ 'collections.paginate.loading' | t }}</span>
            </div>
          </a>
          {%- endif -%}
      {% endif %}
  {%- endfor -%}
  </div>
{%- endcapture -%}

{%- assign collection_title = collection.title | downcase -%}

<div class="{{ classes }}">
  {% if collection_title or collection_description %}
    <div class="collection-info template-title--wrapper">
      {% if collection_title %}
        {% comment %}
      <h1 class="page--title template-title">{{ collection.title }}</h1>
        {% endcomment %}
      {% endif %}

      {% if collection_description %}
        <div class="rte collection-info__description template-description text-link-animated">
          {{ collection.description }}
        </div>
      {% endif %}
    </div>
  {% endif %}

  {% if collection.all_products_count > 1 %}
    <div class="collection-filters collection-filters__{% if desktop_position == 'sidebar' %}sidebar{% else %}topbar{% endif %}" id="main-collection-filters" data-id="{{ section.id }}">
      {% unless enable_filtering == false and enable_sorting == false %}
        <button type="button" class="btn mobile-facets__open" data-drawer-open-btn>
          {% if enable_filtering and enable_sorting %}
            {{ 'sections.collection_template.filter_and_sort' | t }}
          {% elsif enable_filtering and enable_sorting == false %}
            {{ 'sections.collection_template.filter_button' | t }}
          {% else %}
            {{ 'sections.collection_template.sort_button' | t }}
          {% endif %}
        </button>

        {%- assign total_active_values = 0 -%}
        <collection-filtering-form class="facets" data-filter-form data-button-aria-label="{{ 'sections.collection_template.filter_and_sort' | t }}">
          <form id="CollectionFiltersForm" class="facets__form" inert>
            {%- if enable_filtering == true or enable_sorting == true -%}

              {% if enable_sorting == true %}
                <input id="sort_by_input" type="hidden" name="sort_by" value="">
              {% endif %}

              <div class="drawer__close js-drawer-close">
                <button type="button" aria-label="{{ 'general.accessibility.dismiss.close' | t }}" class="mobile-menu--close-btn filter-drawer-btn icon-fallback-text standalone-icon--wrapper" data-drawer-close-btn>
                  <span class="fallback-text">{{ 'general.accessibility.dismiss.close' | t }}</span>
                  {% render 'theme-icon' with icon: 'close', iconSize: 20 %}
                </button>
              </div>

              {% for i in (1..2) %}
                {% liquid 
                  capture device
                    cycle 'desktop', 'mobile'
                  endcapture
                %}

                 {% capture sorting %}
                  <div class="collection-header">
                    <!-- Left: Collection Title -->
                    <h1 class="collection-title">{{ collection.title }}</h1>
                    
                    <!-- Right: Filter, Sort and View Options -->
                    <div class="collection-controls">
                      {% assign is_womens_collection = false %}
                      {% if collection.handle contains 'women' or collection.title contains 'women' or collection.title contains 'Women' or collection.title contains 'WOMEN' or request.path contains 'women' %}
                        {% assign is_womens_collection = true %}
                      {% endif %}
                      
                      {% if is_womens_collection %}
                        <!-- Filter Button -->
                        <div class="dropdown-container filter-dropdown">
                          <button type="button" class="filter-button" id="filter-button">
                            FILTER
                          </button>
                         <div class="dropdown-menu filter-menu">
                              <!-- Collection filters -->
                              
                              <div class="dropdown-item" data-filter-type="collection" data-filter-value="earrings">
                                Earrings
                              </div>
                              <div class="dropdown-item" data-filter-type="collection" data-filter-value="necklaces">
                                Necklaces
                              </div>
                              <div class="dropdown-item" data-filter-type="collection" data-filter-value="rings">
                                Rings
                              </div>
                              <div class="dropdown-item" data-filter-type="collection" data-filter-value="bracelets-anklets">
                                Bracelets + Anklets
                              </div>
                              <div class="dropdown-item" data-filter-type="collection" data-filter-value="belts-brooches">
                                Belts + Brooches
                              </div>
                              <div class="dropdown-item" data-filter-type="collection" data-filter-value="hair">
                                Hair
                              </div>
                              <div class="dropdown-item" onclick="window.location.href='/collections/in-stock'">
                                In Stock
                              </div>
                            </div>
                        </div>
                      {% endif %}
                        
                      <!-- Sort Button -->
                      <div class="dropdown-container sort-dropdown">
                        <button type="button" class="sort-button" id="sort-button">
                          SORT
                        </button>
                        <div class="dropdown-menu sort-menu">
                          <div class="dropdown-item" data-value="manual">Newest</div>
                          <div class="dropdown-item" data-value="price-ascending">Ascending Price</div>
                          <div class="dropdown-item" data-value="price-descending">Descending Price</div>
                        </div>
                      </div>
                    </div>
                  </div>
                {% endcapture %}

                {% if device == 'desktop' %}
                  <div class="facets__form-inner desktop">
                    {% if section.settings.desktop_position == 'sidebar' %}
                      {% if enable_sorting == true %}
                        {{ sorting }}
                      {% endif %}

                      {% if enable_filtering == true %}
                        {{ filters }}
                        {{ active_facets }}
                      {% endif %}
                    {% else %}
                      {% if enable_filtering == true %}
                        {{ filters }}
                      {% endif %}

                      {% if enable_sorting == true %}
                        {{ sorting }}
                      {% endif %}

                      {% if enable_filtering == true %}
                        {{ active_facets }}
                      {% endif %}
                    {% endif %}
                  </div>
                {% endif %}

                {% if device == 'mobile' %}
                  <div class="facets__form-inner mobile">
                    {% if enable_sorting == true %}
                      {{ sorting }}
                    {% endif %}

                    {% if enable_filtering == true %}
                      {{ filters }}
                      {{ active_facets }}
                    {% endif %}
                  </div>
                {% endif %}
              {% endfor %}
            {% endif %}
          </form>
        </collection-filtering-form>
      {% endunless %}

      <div class="filtering-drawer-overlay" data-filtering-drawer-overlay></div>

      <div class="mobile-collection-header">
  <h1 class="mobile-collection-title">{{ collection.title }}</h1>
  <div class="mobile-controls">
    
    <!-- FILTER dropdown (only shown for women's collections) -->
    {% assign is_womens_collection = false %}
    {% if collection.handle contains 'women' or collection.title contains 'women' or collection.title contains 'Women' or collection.title contains 'WOMEN' or request.path contains 'women' %}
      {% assign is_womens_collection = true %}
    {% endif %}
    
    {% if is_womens_collection %}
      <div class="dropdown-container filter-dropdown">
        <button type="button" class="filter-button" id="filter-button">
          FILTER
        </button>
        <div class="dropdown-menu filter-menu">
          <!-- Collection filters -->
          <div class="dropdown-item" data-filter-type="collection" data-filter-value="earrings">
            Earrings
          </div>
          <div class="dropdown-item" data-filter-type="collection" data-filter-value="necklaces">
            Necklaces
          </div>
          <div class="dropdown-item" data-filter-type="collection" data-filter-value="rings">
            Rings
          </div>
          <div class="dropdown-item" data-filter-type="collection" data-filter-value="bracelets-anklets">
            Bracelets + Anklets
          </div>
          <div class="dropdown-item" data-filter-type="collection" data-filter-value="belts-brooches">
            Belts + Brooches
          </div>
          <div class="dropdown-item" data-filter-type="collection" data-filter-value="hair">
            Hair
          </div>
          <div class="dropdown-item" onclick="window.location.href='/collections/in-stock'">
            In Stock
          </div>
        </div>
      </div>
    {% endif %}
    
    <!-- SORT dropdown (always shown) -->
    <div class="dropdown-container sort-dropdown">
      <button type="button" class="sort-button" id="sort-button">
        SORT
      </button>
      <div class="dropdown-menu sort-menu">
        <div class="dropdown-item" data-value="manual">Newest</div>
        <div class="dropdown-item" data-value="price-ascending">Ascending Price</div>
        <div class="dropdown-item" data-value="price-descending">Descending Price</div>
      </div>
    </div>
    
  </div>
</div>
        
   

      <!-- Collection Grid Identifier (blue bar at top) -->
      <div class="collection-grid-identifier">
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M4 5h16v3H4zM4 11h16v3H4zM4 17h16v3H4z"/>
        </svg>
        Collection grid
      </div>

      <!-- Mobile Search Button (Bottom Right) -->
      <button type="button" class="mobile-search-button" id="mobile-search-button">
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
        </svg>
      </button>
      
      
      <div class="container">
          <div class="active-facets active-facets-mobile">
              <a href="{{ collection.url }}?sort_by={{ sort_by }}" class="active-facets__button button button--secondary js-facet-remove" loading="false">
                <span class="active-facets__button--text">{{ 'sections.collection_template.clear_all' | t }}</span>
                <div class="active-facets__button--loading-icon hidden">
                  {% render 'theme-icon' with icon: 'circle-notch', iconClasses: 'spin js fa-2x' %}<span class="sr-only">{{ 'collections.paginate.loading' | t }}</span>
                </div>
              </a>

                {%- for filter in collection.filters -%}

                  {% liquid 
                    assign isColor = false
                    assign file_extension = 'png'
                    assign downcased_label = filter.label | downcase
                    if color_langs contains downcased_label
                      assign isColor = true
                    endif
                  %}

                  {%- for value in filter.active_values -%}
                    <a aria-label="{{ 'general.accessibility.remove_filter' | t: filter: filter.label | append: ': ' | append: value.label }}" class="active-facets__button button button--tertiary js-facet-remove" href="{{ value.url_to_remove }}" {% if isColor %}data-swatch="true"{% endif %} loading="false">
                      <span class="active-facets__button--text inline-icon--wrapper icon--right">
                        {% if filter.type == 'boolean' %}
                          {{ filter.label | escape | append: ': ' }}
                        {% endif %}

                        {% if isColor %}
                          {% liquid 
                            assign image_url = value.label | handle | append: '.' | append: file_extension | asset_url
                            assign has_image_swatch = false

                            if image_url contains 'v='
                              assign has_image_swatch = true
                            endif
                          %}

                          <div 
                            aria-hidden="true" 
                            focusable="false"
                            class="color-icon"
                            {% if isColor %}style="{% if has_image_swatch %}background-image: url({{ image_url }}); background-size: cover;{% else %}background-color: {{ value.label }};{% endif %}"{% endif %}
                          >
                          </div>
                        {% endif %}

                        {{ value.label | escape }}
                        {{ icon_close }}
                      </span>
                      <div class="active-facets__button--loading-icon hidden">
                        {% render 'theme-icon' with icon: 'circle-notch', iconClasses: 'spin js fa-2x' %}<span class="sr-only">{{ 'collections.paginate.loading' | t }}</span>
                      </div>
                    </a>
                  {%- endfor -%}

                  {% if filter.type == "price_range" %}
                      {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
                        {% assign filter_min_value = filter.min_value.value | money %}
                        {% assign filter_max_value = filter.max_value.value | money %}
                        {% assign filter_aria_label = filter.label | append: ': ' | append: filter_min_value | append: ' - ' | append: filter_max_value %}
                        <a aria-label="{{ 'general.accessibility.remove_filter' | t: filter: filter_aria_label }}" class="active-facets__button button button--tertiary js-facet-remove" href="{{ filter.url_to_remove }}" loading="false">
                        <span class="active-facets__button--text inline-icon--wrapper icon--right">
                          {%- if filter.min_value.value -%}{{ filter.min_value.value | money }}{%- else -%}{{ 0 | money }}{%- endif -%}-{%- if filter.max_value.value -%}{{ filter.max_value.value | money }}{%- else -%}{{ filter.range_max | money }}{%- endif -%}
                          {{ icon_close }}
                        </span>
                        <div class="active-facets__button--loading-icon hidden">
                          {% render 'theme-icon' with icon: 'circle-notch', iconClasses: 'spin js fa-2x' %}<span class="sr-only">{{ 'collections.paginate.loading' | t }}</span>
                        </div>
                      </a>
                      {%- endif -%}
                  {% endif %}
              {%- endfor -%}
          </div>
      </div>
    </div>
  {% endif %}
</div>

{% if collection.all_products_count > 1 %}
  <safe-load-scripts class="hidden">
    <script src="{{ 'component-filtering.js' | asset_url }}" type="module" defer="defer" data-internal-script data-flow-load-key="component-filtering"></script>
  </safe-load-scripts>
{% endif %}